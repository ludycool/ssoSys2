<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace必须是接口的全类名 -->
<mapper namespace="jifan.ssosys.mapper.CommonMapper">

    <!-- 1.0 查数量 -->
    <select id="count"  resultType="long">
        select count(*)  from ${tableName} where ${whereStr};
    </select>

    <!--  执行查询，并返回结果集的第一行的第一列-->
    <select id="executeScalar" parameterType="String"  resultType="Object" >
      ${value}
    </select>

    <!--  执行sql 返回受影响行数-->
    <update id="executeNonQuery" parameterType="String" >
      ${value}
    </update>


    <!--  为保证查询的字段值有序（存入与取出顺序一致）所以采用LinkedHashMap-->
    <select id="listMapBySql" parameterType="String"  resultType="java.util.LinkedHashMap" >
      ${value}
    </select>
    <!--  为保证查询的字段值有序（存入与取出顺序一致）所以采用LinkedHashMap-->
    <select id="listMapByWrapper"   resultType="java.util.LinkedHashMap" >

    SELECT ${field} FROM ${tableName}
        <if test="ew.sqlSegment!=null">
            where ${ew.sqlSegment}
        </if>
    </select>

    <!--  查单个-->
    <select id="getMapBySql" parameterType="String"  resultType="java.util.Map" >
      ${value}
    </select>

    <!--插入一条数据 -->
    <insert id="insert" parameterType="java.util.Map">
        insert into ${tableName}
        <foreach collection="item.keys" item="key" open="(" close=")"
                 separator=",">
            ${key}
        </foreach>
        values
        <foreach collection="item.values" item="value" open="("
                 close=")" separator=",">
            #{value}
        </foreach>
    </insert>

    <!-- 更新记录 -->
    <update id="update" parameterType="java.util.Map">
        UPDATE ${tableName} SET
        <foreach collection="item.keys" item="key" open="" close=""
                 separator=",">
            ${key} = #{item[${key}]}
        </foreach>
        where ${ew.sqlSegment}
    </update>

    <!--  条件删除 -->
    <delete id="delete" >
        delete  from ${tableName} where ${whereStr};
    </delete>

</mapper>
